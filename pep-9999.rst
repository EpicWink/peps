PEP: 9999
Title: Dependency specification in pyproject.toml using an exploded TOML table
Author: Laurie Opperman <laurie_opperman@hotmail.com>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 02-09-2020
Post-History: TBD


Abstract
========

This PEP specifies how to write a project's dependencies in a
``pyproject.toml`` file for packaging-related tools to consume using the fields
defined in :pep:`621`, as an alternative to the :pep:`508`-based approach
defined in :pep:`631`. Specifically, the tables ``project.dependencies`` and
``project.optional-dependencies`` are defined.


Motivation
==========

There are multiple benefits to using TOML tables and other data-types to
represent requirements rather then :pep:`508` strings:

- Easy initial validation via the TOML syntax.

- Easy secondary validation using a schema, for example a `JSON Schema`_.

- Potential for users to guess the keys of given features, rather than
  memorising a syntax.

- Users of multiple other popular languages may already be familiar with the
  TOML syntax.

- TOML directly represents the same data structures as in JSON, and therefore a
  sub-set of Python literals, so users can understand the hierarchy and type of
  value

.. _JSON Schema: https://json-schema.org/


Rationale
=========

Most of this is taken from discussions in the `PEP 621 dependencies topic`_.
This has elements from `Pipfile`_, `Poetry`_, `Dart's dependencies`_ and
`Rust's Cargo`_. A `comparison document`_ shows advantages and disadvantages
between this format and :pep:`508`-style specifiers.

One example is the need to allow for specifying distributions in multiple
dependencies (environment markers will choose the appropriate dependency).

Some dependency specifications, as in `Poetry`_, separate the :pep:`508`
environment markers into separate keys in the requirement. This loses the
general Python-like syntax for environment markers, and also removes the
ability to logically combines the markers with grouped `and` and `or`
operations.

The ``direct`` key closely aligns with :pep:`610` and :pep:`440`'s direct
references as to reduce differences in the packaging ecosystem and rely on
previous work in specification.

.. _PEP 621 dependencies topic: https://discuss.python.org/t/pep-621-how-to-specify-dependencies/4599
.. _Pipfile: https://github.com/pypa/pipfile
.. _Poetry: https://python-poetry.org/docs/dependency-specification/
.. _Dart's dependencies: https://dart.dev/tools/pub/dependencies
.. _Rust's Cargo: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
.. _comparison document: https://github.com/uranusjr/packaging-metadata-comparisons/blob/master/topics/dependency-entries.md


Specification
=============

As in :pep:`621`, if metadata is improperly specified then tools MUST raise an
error. The metadata MUST conform to the `toml`_ specification.

To reduce confusion with this document being a specification for specifying
dependencies, the word "requirement" is used to mean a :pep:`508` dependency
specification.

The following tables are added to the added to the ``project`` table specified
in :pep:`621`.

.. _toml: https://toml.io/

.. _dependencies-spec:

dependencies
------------

Format: table

The keys inside this table are the names of the required distribution. The
values can have one of the following types:

- string: the requirement is defined only by a version requirement, with same
  specification as ``version`` in the requirement table.

- table: a requirement table.

- array: an array of requirement tables.

It is an error to specify an empty array ``[]`` or string ``''`` as a value.

Requirement table
^^^^^^^^^^^^^^^^^

The keys of the requirement table are as follows:

- ``version`` (string): a :pep:`440` version specifier, which is a comma-
  delimited list of version specifier clauses. The string MUST be non-empty.

- ``extras`` (array of strings): a list of :pep:`508` extras declarations for
  the distribution. The list MUST be non-empty.

- ``markers`` (string): a :pep:`508` environment marker expression. The string
  MUST be non-empty.

- ``direct`` (table): see below

The ``version`` and ``direct`` keys MUST NOT be specified
simultaneously, as they logically conflict with each other in the requirement.

An empty requirement table ``{}`` places no restriction on the requirement.

direct
******

This is inspired by :pep:`610` and :pep:`440`'s direct references. The table
can have the following keys:

- ``url`` (string, *required*): the URL of the artifact or VCS repository to
  install and satisfy the requirement. If a VCS revision, a revision identifier
  MAY be appended after an at-sign "@". Revision identifiers are suggested in
  :pep:`610`.

- ``vcs`` (string): if (and only if) specified, the URL points to a VCS
  repository. The value is the name of the VCS used, as suggested in
  :pep:`610`.

- ``hash`` (string): the hash of the retrieved artifact, prefixed with the
  hash algorithm and an equals-sign "=". Hash algorithms are recommended in
  :pep:`610`.

optional-dependencies
---------------------

Format: table

The keys inside this table are the names of the project's :pep:`508` extras.
The values each specify the list of requirements required by the extra, and are
tables. These requirement lists are described with the same as
`the dependencies specification <#dependencies-spec>`_ above.


Examples
========

Inline table::

    [project]
    dependencies = { flask = {}, django = {}, numpy = '~=1.18' }

Inline tables::

    [project.dependencies]
    flask = {}
    django = {}
    requests = { version = '>= 2.8.1, == 2.8.*', extras = [ 'security', 'tests' ], markers = 'python_version < "2.7"' }
    pip = { direct = { url = 'https://github.com/pypa/pip/archive/1.3.1.zip', hash = 'sha1=da9234ee9982d4bbb3c72346a6de940a148ea686' } }
    sphinx.direct = { vcs = 'git', url = 'ssh://git@github.com/sphinx-doc/sphinx.git' }
    numpy = '~=1.18'
    pytest = [
        { version = '<6', markers = 'python_version < "3.5"' },
        { version = '>=6', markers = 'python_version >= "3.5"' },
    ]

Standard tables::

    [project.dependencies.flask]

    [project.dependencies.django]

    [project.dependencies.requests]
    version = '>= 2.8.1, == 2.8.*'
    extras = [ 'security', 'tests' ]
    markers = 'python_version < "2.7"'

    [project.dependencies.pip]
    direct.url = 'https://github.com/pypa/pip/archive/1.3.1.zip'
    direct.hash = 'sha1=da9234ee9982d4bbb3c72346a6de940a148ea686'

    [project.dependencies.sphinx.direct]
    vcs = 'git'
    url = 'ssh://git@github.com/sphinx-doc/sphinx.git'

    [project.dependencies.numpy]
    version = '~=1.18'

    [[project.dependencies.pytest]]
    version = '<6'
    markers = 'python_version < "3.5"'

    [[project.dependencies.pytest]]
    version = '>=6'
    markers = 'python_version >= "3.5"'

In homage to :pep:`631`, the following is an equivalent dependencies
specification for `docker-compose`_::

    [project.dependencies]
    cached-property = { version = '>= 1.2.0, < 2' }
    distro = { version = '>= 1.2.0, < 2' }
    docker = { extras = [ 'ssh' ], version = '>= 4.2.2, < 5' }
    docopt.version = '>= 0.6.1, < 1'
    jsonschema.version = '>= 2.5.1, < 4'
    PyYAML.version = '>= 3.10, < 6'
    python-dotenv = { version = '>= 0.13.0, < 1' }
    requests = { version = '>= 2.20.0, < 3' }

    # Conditional
    'backports.shutil_get_terminal_size' = { version = '== 1.0.0', markers = 'python_version < "3.3"' }
    colorama.version = '>= 0.4, < 1'
    colorama.markers = 'sys_platform == "win32"'

    [project.dependencies.texttable]
    version = '>= 0.9.0, < 2'

    [project.dependencies.websocket-client]
    version = '>= 0.32.0, < 1'

    [project.dependencies.'backports.ssl_match_hostname']
    version = '>= 3.5, < 4'
    markers = 'python_version < "3.5"'

    [project.dependencies.colorama]
    version = '>= 0.4, < 1'
    markers = 'sys_platform == "win32"'

    [project.dependencies.enum34]
    version = '>= 1.0.4, < 2'
    markers = 'python_version < "3.4"'

    [project.dependencies.ipaddress]
    version = '>= 1.0.16, < 2'
    markers = 'python_version < "3.3"'

    [project.dependencies.subprocess32]
    version = '>= 3.5.4, < 4'
    markers = 'python_version < "3.2"'

    [project.optional-dependencies]
    socks = { PySocks = { version = '>= 1.5.6, != 1.5.7, < 2' ] } }

    [project.optional-dependencies.tests]
    ddt = { version = '>= 1.2.2, < 2' }
    pytest = { version = '< 6' ] }
    mock = { version = '>= 1.0.1, < 4' }

    [project.optional-dependencies.tests.mock]
    markers = 'python_version < "3.4"'

.. _docker-compose: https://github.com/docker/compose/blob/789bfb0e8b2e61f15f423d371508b698c64b057f/setup.py#L28-L61


Rejected Ideas
==============

- Using an array for `dependencies` instead of a table, in order to have each
  element only be a table (with a `name` key) and no arrays of requirement
  tables. This was very verbose and restrictive in the TOML format, and having
  multiple requirements for a given distribution isn't very common.


Open Issues
===========

- Split VCS revision from URL into a separate key, such as ``revision``, in the
  ``direct`` table. This would increase verbosity, but could make parsing and
  automated updating more straight-forward.

- Split hash type from hash value in the ``direct`` table. As above, increases
  verbosity but also programmatic ease.

- Making each :pep:`508` environment marker as a key (or child-table key) in
  the requirement. This arguably increases readability and ease of parsing,
  however the ability to have nested groups of ``and`` and ``or`` operations
  on the markers is lost.

- Removing the ``optional-dependencies`` table in favour of both including an
  ``optional`` key in the requirement and an ``extras`` table which specifies
  which (optional) requirements are needed for a project's extra. This reduces
  the number of table with the same specification (to 1), but distances some of
  the requirement's properties (which extra(s) it belongs to), groups required
  and optional dependencies together (possibly mixed), and there may not be a
  simple way to choose a requirement when a distribution has multiple
  requirements.

- Remove the ``optional-dependencies`` table in favour of including a
  ``for-extras`` key in the requirement. This reduces the number of table with
  the same specification (to 1), but groups required and optional dependencies
  together (possibly mixed).


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
