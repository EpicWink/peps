PEP: 9999
Title: Dependency specification in pyproject.toml using an exploded TOML table
Author: Laurie Opperman <laurie_opperman@hotmail.com>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 02-09-2020
Post-History: TBD


Abstract
========

This PEP specifies how to write a project's dependencies in a
``pyproject.toml`` file for packaging-related tools to consume using the fields
defined in :pep:`621`, as an alternative to the :pep:`508`-based approach
defined in :pep:`631`. Specifically, the tables ``project.dependencies`` and
``project.optional-dependencies`` are defined.


Rationale
=========

Most of this is taken from discussions in the `PEP 621 dependencies topic`_.
This has elements from `Pipfile`_, `Poetry`_, `Dart's dependencies`_ and
`Rust's Cargo`_. A `comparison document`_ shows advantages and disadvantages
between this format and :pep:`508`-style specifiers.

One example is the need to allow for specifying distributions in multiple
dependencies (environment markers will choose the appropriate dependency).

Some dependency specifications, as in `Poetry`_, separate the :pep:`508`
environment markers into separate keys in the requirement. This loses the
general Python-like syntax for environment markers, and also removes the
ability to logically combines the markers with grouped `and` and `or`
operations.

.. _PEP 621 dependencies topic: https://discuss.python.org/t/pep-621-how-to-specify-dependencies/4599
.. _Pipfile: https://github.com/pypa/pipfile
.. _Poetry: https://python-poetry.org/docs/dependency-specification/
.. _Dart's dependencies: https://dart.dev/tools/pub/dependencies
.. _Rust's Cargo: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
.. _comparison document: https://github.com/uranusjr/packaging-metadata-comparisons/blob/master/topics/dependency-entries.md


Specification
=============

As in :pep:`621`, if metadata is improperly specified then tools MUST raise an
error. The metadata MUST conform to the `toml`_ specification.

To reduce confusion with this document being a specification for specifying
dependencies, the word "requirement" is used to mean a :pep:`508` dependency
specification.

The following tables are added to the added to the ``project`` table specified
in :pep:`621`.

.. _toml: https://toml.io/

.. _dependencies-spec:

dependencies
------------

Format: table

The keys inside this table are the names of the required distribution. The
values can be either a requirement table or an array of requirement tables
(below).

It is an error to specify an empty array ``[]`` as a value.

Requirement table
^^^^^^^^^^^^^^^^^

The keys of the requirement table are as follows:

- ``version`` (string): a :pep:`440` version specifier, which is a comma-
  delimited list of version specifier clauses. The string MUST be non-empty.

- ``extras`` (array of strings): a list of :pep:`508` extras declarations for
  the distribution. The list MUST be non-empty.

- ``markers`` (string): a :pep:`508` environment marker expression. The string
  MUST be non-empty.

- ``url`` (string): the URL of a web-based artifact to install and satisfy the
  requirement.

- ``git`` (string): similar to ``url``, the identifier of a web-hosted VCS
  repository to checkout to install and satisfy the requirement. A tag, commit
  or branch can be explicitly specified by appending its identifier prefixed
  with an at sign "@", otherwise the default branch is used.

The ``url``, ``git`` and ``versions`` keys MUST NOT be specified
simultaneously, as they logically conflict with each other in the requirement.

An empty requirement table ``{}`` places no restriction on the requirement.

optional-dependencies
---------------------

Format: table

The keys inside this table are the names of the project's :pep:`508` extras.
The values each specify the list of requirements required by the extra, and are
tables. These requirement lists are described with the same as
`the dependencies specification <#dependencies-spec>`_ above.


Examples
========

Inline table::

    [project]
    dependences = { flask = {}, django = {}, numpy.version = '~=1.18' }

Inline tables::

    [project.dependences]
    flask = {}
    django = {}
    requests = { version = '>= 2.8.1, == 2.8.*', extras = [ 'security', 'tests' ], markers = 'python_version < "2.7"' }
    pip = { url = 'https://github.com/pypa/pip/archive/1.3.1.zip#sha1=da9234ee9982d4bbb3c72346a6de940a148ea686' }
    numpy.version = '~=1.18'
    pytest = [
        { version = '<6', markers = 'python_version < "3.5"' },
        { version = '>=6', markers = 'python_version >= "3.5"' },
    ]

Standard tables::

    [project.dependencies.flask]

    [project.dependencies.django]

    [project.dependencies.requests]
    version = '>= 2.8.1, == 2.8.*'
    extras = [ 'security', 'tests' ]
    markers = 'python_version < "2.7"'

    [project.dependencies.pip]
    url = 'https://github.com/pypa/pip/archive/1.3.1.zip#sha1=da9234ee9982d4bbb3c72346a6de940a148ea686'

    [project.dependencies.numpy]
    version = '~=1.18'

    [[project.dependencies.pytest]]
    versions = '<6'
    markers = 'python_version < "3.5"'

    [[project.dependencies.pytest]]
    versions = '>=6'
    markers = 'python_version >= "3.5"'

In homage to :pep:`631`, the following is an equivalent dependencies
specification for `docker-compose`_::

    [project.dependencies]
    cached-property = { version = '>= 1.2.0, < 2' }
    distro = { version = '>= 1.2.0, < 2' }
    docker = { extras = [ 'ssh' ], version = '>= 4.2.2, < 5' }
    docopt.version = '>= 0.6.1, < 1'
    jsonschema.version = '>= 2.5.1, < 4'
    PyYAML.version = '>= 3.10, < 6'
    python-dotenv = { version = '>= 0.13.0, < 1' }
    requests = { version = '>= 2.20.0, < 3' }

    # Conditional
    'backports.shutil_get_terminal_size' = { version = '== 1.0.0', markers = 'python_version < "3.3"' }
    colorama.version = '>= 0.4, < 1'
    colorama.markers = 'sys_platform == "win32"'

    [project.dependencies.texttable]
    version = '>= 0.9.0, < 2'

    [project.dependencies.websocket-client]
    version = '>= 0.32.0, < 1'

    [project.dependencies.'backports.ssl_match_hostname']
    version = '>= 3.5, < 4'
    markers = 'python_version < "3.5"'

    [project.dependencies.colorama]
    version = '>= 0.4, < 1'
    markers = 'sys_platform == "win32"'

    [project.dependencies.enum34]
    version = '>= 1.0.4, < 2'
    markers = 'python_version < "3.4"'

    [project.dependencies.ipaddress]
    version = '>= 1.0.16, < 2'
    markers = 'python_version < "3.3"'

    [project.dependencies.subprocess32]
    version = '>= 3.5.4, < 4'
    markers = 'python_version < "3.2"'

    [project.optional-dependencies]
    socks = { PySocks = { version = '>= 1.5.6, != 1.5.7, < 2' ] } }

    [project.optional-dependencies.tests]
    ddt = { version = '>= 1.2.2, < 2' }
    pytest = { version = '< 6' ] }
    mock = { version = '>= 1.0.1, < 4' }

    [project.optional-dependencies.tests.mock]
    markers = 'python_version < "3.4"'

.. _docker-compose: https://github.com/docker/compose/blob/789bfb0e8b2e61f15f423d371508b698c64b057f/setup.py#L28-L61


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
